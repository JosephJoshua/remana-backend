// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: phone_equipment.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPhoneEquipment = `-- name: CreatePhoneEquipment :exec
INSERT INTO phone_equipments (
  phone_equipment_id,
  store_id,
  phone_equipment_name
)
VALUES (
  $1,
  $2,
  $3
)
`

type CreatePhoneEquipmentParams struct {
	PhoneEquipmentID   pgtype.UUID
	StoreID            pgtype.UUID
	PhoneEquipmentName string
}

func (q *Queries) CreatePhoneEquipment(ctx context.Context, arg CreatePhoneEquipmentParams) error {
	_, err := q.db.Exec(ctx, createPhoneEquipment, arg.PhoneEquipmentID, arg.StoreID, arg.PhoneEquipmentName)
	return err
}

const isPhoneEquipmentNameTaken = `-- name: IsPhoneEquipmentNameTaken :one
SELECT 1
FROM phone_equipments
WHERE phone_equipments.store_id = $1 AND phone_equipments.phone_equipment_name = $2
`

type IsPhoneEquipmentNameTakenParams struct {
	StoreID            pgtype.UUID
	PhoneEquipmentName string
}

func (q *Queries) IsPhoneEquipmentNameTaken(ctx context.Context, arg IsPhoneEquipmentNameTakenParams) (int32, error) {
	row := q.db.QueryRow(ctx, isPhoneEquipmentNameTaken, arg.StoreID, arg.PhoneEquipmentName)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
