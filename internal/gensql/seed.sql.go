// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: seed.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const seedLoginCode = `-- name: SeedLoginCode :one
INSERT INTO login_codes (login_code_id, user_id, login_code)
VALUES ($1, $2, $3)
RETURNING login_code_id
`

type SeedLoginCodeParams struct {
	LoginCodeID pgtype.UUID
	UserID      pgtype.UUID
	LoginCode   string
}

func (q *Queries) SeedLoginCode(ctx context.Context, arg SeedLoginCodeParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, seedLoginCode, arg.LoginCodeID, arg.UserID, arg.LoginCode)
	var login_code_id pgtype.UUID
	err := row.Scan(&login_code_id)
	return login_code_id, err
}

const seedRole = `-- name: SeedRole :one
INSERT INTO roles (role_id, role_name, store_id, is_store_admin)
VALUES ($1, $2, $3, $4)
RETURNING role_id
`

type SeedRoleParams struct {
	RoleID       pgtype.UUID
	RoleName     string
	StoreID      pgtype.UUID
	IsStoreAdmin bool
}

func (q *Queries) SeedRole(ctx context.Context, arg SeedRoleParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, seedRole,
		arg.RoleID,
		arg.RoleName,
		arg.StoreID,
		arg.IsStoreAdmin,
	)
	var role_id pgtype.UUID
	err := row.Scan(&role_id)
	return role_id, err
}

const seedStore = `-- name: SeedStore :one
INSERT INTO stores (store_id, store_name, store_code, store_address, phone_number)
VALUES ($1, $2, $3, $4, $5)
RETURNING store_id
`

type SeedStoreParams struct {
	StoreID      pgtype.UUID
	StoreName    string
	StoreCode    string
	StoreAddress string
	PhoneNumber  string
}

func (q *Queries) SeedStore(ctx context.Context, arg SeedStoreParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, seedStore,
		arg.StoreID,
		arg.StoreName,
		arg.StoreCode,
		arg.StoreAddress,
		arg.PhoneNumber,
	)
	var store_id pgtype.UUID
	err := row.Scan(&store_id)
	return store_id, err
}

const seedUser = `-- name: SeedUser :one
INSERT INTO users (user_id, username, user_password, role_id, store_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id
`

type SeedUserParams struct {
	UserID       pgtype.UUID
	Username     string
	UserPassword string
	RoleID       pgtype.UUID
	StoreID      pgtype.UUID
}

func (q *Queries) SeedUser(ctx context.Context, arg SeedUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, seedUser,
		arg.UserID,
		arg.Username,
		arg.UserPassword,
		arg.RoleID,
		arg.StoreID,
	)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
