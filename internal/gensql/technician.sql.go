// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: technician.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTechnician = `-- name: CreateTechnician :exec
INSERT INTO technicians (
  technician_id,
  store_id,
  technician_name
)
VALUES (
  $1,
  $2,
  $3
)
`

type CreateTechnicianParams struct {
	TechnicianID   pgtype.UUID
	StoreID        pgtype.UUID
	TechnicianName string
}

func (q *Queries) CreateTechnician(ctx context.Context, arg CreateTechnicianParams) error {
	_, err := q.db.Exec(ctx, createTechnician, arg.TechnicianID, arg.StoreID, arg.TechnicianName)
	return err
}

const isTechnicianNameTaken = `-- name: IsTechnicianNameTaken :one
SELECT 1
FROM technicians
WHERE technicians.store_id = $1 AND technicians.technician_name = $2
`

type IsTechnicianNameTakenParams struct {
	StoreID        pgtype.UUID
	TechnicianName string
}

func (q *Queries) IsTechnicianNameTaken(ctx context.Context, arg IsTechnicianNameTakenParams) (int32, error) {
	row := q.db.QueryRow(ctx, isTechnicianNameTaken, arg.StoreID, arg.TechnicianName)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
