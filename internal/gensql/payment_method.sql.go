// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payment_method.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :exec
INSERT INTO payment_methods (
  payment_method_id,
  store_id,
  payment_method_name
)
VALUES (
  $1,
  $2,
  $3
)
`

type CreatePaymentMethodParams struct {
	PaymentMethodID   pgtype.UUID
	StoreID           pgtype.UUID
	PaymentMethodName string
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) error {
	_, err := q.db.Exec(ctx, createPaymentMethod, arg.PaymentMethodID, arg.StoreID, arg.PaymentMethodName)
	return err
}

const isPaymentMethodNameTaken = `-- name: IsPaymentMethodNameTaken :one
SELECT 1
FROM payment_methods
WHERE payment_methods.store_id = $1 AND LOWER(payment_methods.payment_method_name) = LOWER($2)
`

type IsPaymentMethodNameTakenParams struct {
	StoreID           pgtype.UUID
	PaymentMethodName string
}

func (q *Queries) IsPaymentMethodNameTaken(ctx context.Context, arg IsPaymentMethodNameTakenParams) (int32, error) {
	row := q.db.QueryRow(ctx, isPaymentMethodNameTaken, arg.StoreID, arg.PaymentMethodName)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
