// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: phone_condition.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPhoneCondition = `-- name: CreatePhoneCondition :exec
INSERT INTO phone_conditions (
  phone_condition_id,
  store_id,
  phone_condition_name
)
VALUES (
  $1,
  $2,
  $3
)
`

type CreatePhoneConditionParams struct {
	PhoneConditionID   pgtype.UUID
	StoreID            pgtype.UUID
	PhoneConditionName string
}

func (q *Queries) CreatePhoneCondition(ctx context.Context, arg CreatePhoneConditionParams) error {
	_, err := q.db.Exec(ctx, createPhoneCondition, arg.PhoneConditionID, arg.StoreID, arg.PhoneConditionName)
	return err
}

const isPhoneConditionNameTaken = `-- name: IsPhoneConditionNameTaken :one
SELECT 1
FROM phone_conditions
WHERE phone_conditions.store_id = $1 AND LOWER(phone_conditions.phone_condition_name) = LOWER($2)
`

type IsPhoneConditionNameTakenParams struct {
	StoreID            pgtype.UUID
	PhoneConditionName string
}

func (q *Queries) IsPhoneConditionNameTaken(ctx context.Context, arg IsPhoneConditionNameTakenParams) (int32, error) {
	row := q.db.QueryRow(ctx, isPhoneConditionNameTaken, arg.StoreID, arg.PhoneConditionName)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
