// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permission.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (
  role_id,
  store_id,
  role_name,
  is_store_admin
)
VALUES (
  $1,
  $2,
  $3,
  $4
)
`

type CreateRoleParams struct {
	RoleID       pgtype.UUID
	StoreID      pgtype.UUID
	RoleName     string
	IsStoreAdmin bool
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.Exec(ctx, createRole,
		arg.RoleID,
		arg.StoreID,
		arg.RoleName,
		arg.IsStoreAdmin,
	)
	return err
}

const isRoleNameTaken = `-- name: IsRoleNameTaken :one
SELECT 1
FROM roles
WHERE roles.store_id = $1 AND LOWER(roles.role_name) = LOWER($2)
`

type IsRoleNameTakenParams struct {
	StoreID  pgtype.UUID
	RoleName string
}

func (q *Queries) IsRoleNameTaken(ctx context.Context, arg IsRoleNameTakenParams) (int32, error) {
	row := q.db.QueryRow(ctx, isRoleNameTaken, arg.StoreID, arg.RoleName)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
