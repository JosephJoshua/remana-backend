// Code generated by ogen, DO NOT EDIT.

package genapi

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #
type LoginCodePrompt struct {
	LoginCode string `json:"login_code"`
}

// GetLoginCode returns the value of LoginCode.
func (s *LoginCodePrompt) GetLoginCode() string {
	return s.LoginCode
}

// SetLoginCode sets the value of LoginCode.
func (s *LoginCodePrompt) SetLoginCode(val string) {
	s.LoginCode = val
}

// LoginCodePromptNoContent is response for LoginCodePrompt operation.
type LoginCodePromptNoContent struct{}

// Ref: #
type LoginCredentials struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	StoreCode string `json:"store_code"`
}

// GetUsername returns the value of Username.
func (s *LoginCredentials) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *LoginCredentials) GetPassword() string {
	return s.Password
}

// GetStoreCode returns the value of StoreCode.
func (s *LoginCredentials) GetStoreCode() string {
	return s.StoreCode
}

// SetUsername sets the value of Username.
func (s *LoginCredentials) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *LoginCredentials) SetPassword(val string) {
	s.Password = val
}

// SetStoreCode sets the value of StoreCode.
func (s *LoginCredentials) SetStoreCode(val string) {
	s.StoreCode = val
}

// Ref: #
type LoginResponse struct {
	// The type of user that logged in:
	// * `admin` - Store admin. The session ID is returned in a cookie named
	// `session_id`. You need to include this cookie in subsequent requests.
	// * `employee` - Store employee. The user needs to log in with a login
	// code given by the store admin. The login code prompt ID is returned in
	// a cookie named `login_code_prompt_id`. You need to visit [/auth/login-code](#/auth/loginCodePrompt)
	// with the login code to log in.
	Type LoginResponseType `json:"type"`
}

// GetType returns the value of Type.
func (s *LoginResponse) GetType() LoginResponseType {
	return s.Type
}

// SetType sets the value of Type.
func (s *LoginResponse) SetType(val LoginResponseType) {
	s.Type = val
}

// The type of user that logged in:
// * `admin` - Store admin. The session ID is returned in a cookie named
// `session_id`. You need to include this cookie in subsequent requests.
// * `employee` - Store employee. The user needs to log in with a login
// code given by the store admin. The login code prompt ID is returned in
// a cookie named `login_code_prompt_id`. You need to visit [/auth/login-code](#/auth/loginCodePrompt)
// with the login code to log in.
type LoginResponseType string

const (
	LoginResponseTypeAdmin    LoginResponseType = "admin"
	LoginResponseTypeEmployee LoginResponseType = "employee"
)

// AllValues returns all LoginResponseType values.
func (LoginResponseType) AllValues() []LoginResponseType {
	return []LoginResponseType{
		LoginResponseTypeAdmin,
		LoginResponseTypeEmployee,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LoginResponseType) MarshalText() ([]byte, error) {
	switch s {
	case LoginResponseTypeAdmin:
		return []byte(s), nil
	case LoginResponseTypeEmployee:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LoginResponseType) UnmarshalText(data []byte) error {
	switch LoginResponseType(data) {
	case LoginResponseTypeAdmin:
		*s = LoginResponseTypeAdmin
		return nil
	case LoginResponseTypeEmployee:
		*s = LoginResponseTypeEmployee
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
