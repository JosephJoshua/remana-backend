// Code generated by ogen, DO NOT EDIT.

package genapi

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestCreateRepairOrderRequest_EncodeDecode(t *testing.T) {
	var typ CreateRepairOrderRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateRepairOrderRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateRepairOrderRequestDownPayment_EncodeDecode(t *testing.T) {
	var typ CreateRepairOrderRequestDownPayment
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateRepairOrderRequestDownPayment
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateRepairOrderRequestPasscode_EncodeDecode(t *testing.T) {
	var typ CreateRepairOrderRequestPasscode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateRepairOrderRequestPasscode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateSalesPersonRequest_EncodeDecode(t *testing.T) {
	var typ CreateSalesPersonRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateSalesPersonRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateTechnicianRequest_EncodeDecode(t *testing.T) {
	var typ CreateTechnicianRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateTechnicianRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestError_EncodeDecode(t *testing.T) {
	var typ Error
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginCodePrompt_EncodeDecode(t *testing.T) {
	var typ LoginCodePrompt
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginCodePrompt
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginCredentials_EncodeDecode(t *testing.T) {
	var typ LoginCredentials
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginCredentials
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginResponse_EncodeDecode(t *testing.T) {
	var typ LoginResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginResponseType_EncodeDecode(t *testing.T) {
	var typ LoginResponseType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginResponseType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}

func TestLoginResponseType_Examples(t *testing.T) {

	for i, tc := range []struct {
		Input string
	}{
		{Input: "\"admin\""},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ LoginResponseType

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				if validateErr, ok := errors.Into[*validate.Error](err); ok {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Encoder{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Bytes()), "Encoded: %s", e.Bytes())

			var typ2 LoginResponseType
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Bytes())))
		})
	}
}
func TestUserDetails_EncodeDecode(t *testing.T) {
	var typ UserDetails
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserDetails
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserDetailsRole_EncodeDecode(t *testing.T) {
	var typ UserDetailsRole
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserDetailsRole
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserDetailsStore_EncodeDecode(t *testing.T) {
	var typ UserDetailsStore
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserDetailsStore
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
