// Code generated by ogen, DO NOT EDIT.

package genapi

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func encodeCreateRepairOrderResponse(response *CreateRepairOrderCreated, w http.ResponseWriter) error {
	// Encoding response headers.
	{
		h := uri.NewHeaderEncoder(w.Header())
		// Encode "Location" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Location",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.URLToString(response.Location))
			}); err != nil {
				return errors.Wrap(err, "encode Location header")
			}
		}
	}
	w.WriteHeader(201)

	return nil
}

func encodeCreateSalesPersonResponse(response *CreateSalesPersonCreated, w http.ResponseWriter) error {
	// Encoding response headers.
	{
		h := uri.NewHeaderEncoder(w.Header())
		// Encode "Location" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Location",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.URLToString(response.Location))
			}); err != nil {
				return errors.Wrap(err, "encode Location header")
			}
		}
	}
	w.WriteHeader(201)

	return nil
}

func encodeCreateTechnicianResponse(response *CreateTechnicianCreated, w http.ResponseWriter) error {
	// Encoding response headers.
	{
		h := uri.NewHeaderEncoder(w.Header())
		// Encode "Location" header.
		{
			cfg := uri.HeaderParameterEncodingConfig{
				Name:    "Location",
				Explode: false,
			}
			if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
				return e.EncodeValue(conv.URLToString(response.Location))
			}); err != nil {
				return errors.Wrap(err, "encode Location header")
			}
		}
	}
	w.WriteHeader(201)

	return nil
}

func encodeGetHealthResponse(response *GetHealthNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeGetMyUserDetailsResponse(response *UserDetails, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeLoginResponse(response *LoginResponse, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeLoginCodePromptResponse(response *LoginCodePromptNoContent, w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

func encodeLogoutResponse(response *LogoutResetContent, w http.ResponseWriter) error {
	w.WriteHeader(205)

	return nil
}

func encodeErrorResponse(response *ErrorStatusCode, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	code := response.StatusCode
	if code == 0 {
		// Set default status code.
		code = http.StatusOK
	}
	w.WriteHeader(code)

	e := new(jx.Encoder)
	response.Response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	if code >= http.StatusInternalServerError {
		return errors.Wrapf(ht.ErrInternalServerErrorResponse, "code: %d, message: %s", code, http.StatusText(code))
	}
	return nil

}
